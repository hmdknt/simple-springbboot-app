buildscript {
	ext {
		springBootVersion = '2.1.0.RELEASE'
	}
	repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.16.0"
	}
}

plugins {
	id "org.sonarqube" version "2.5"
    id "org.flywaydb.flyway" version "5.0.7"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: "com.diffplug.gradle.spotless"

ext {
    extention = 'jar'

}

configurations {
	myBatisGenerator
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

sonarqube {
	properties {
		property "sonar.inclusions", ["src/main/java/**/*.java"]
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.projectKey", "xxxxxx"
		property "sonar.projectName", "xxxxx"
		property "sonar.java.binaries", "**/build/classes"
		property "sonar.java.libraries", "**/build/**/*.jar"
		property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"

	}
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.flywaydb:flyway-core')
	implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    compile('mysql:mysql-connector-java:6.0.6')
    compileOnly('org.projectlombok:lombok:1.18.4')
	runtimeOnly('org.springframework.boot:spring-boot-devtools')
	runtimeOnly('mysql:mysql-connector-java')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.security:spring-security-test')

	myBatisGenerator("org.mybatis.generator:mybatis-generator-core:1.3.7")
	myBatisGenerator("mysql:mysql-connector-java:5.1.46")
}

configurations {
	all {
		resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
	}
}

jacoco {
	toolVersion = '0.8.2'
}

jar {
	archiveName = "${baseName}.${extention}"
}

test {
	reports.html.enabled = false
	testLogging {
		exceptionFormat 'full'
		info {
			events 'started', 'passed', 'skipped', 'failed'
		}
	}
}

// Javadoc Error Ignore
tasks.withType(Javadoc) {
	options.charSet = "UTF-8"
	options.encoding = "UTF-8"
	options.addBooleanOption("Xdoclint:none", true)
}

// Java Compile Config
tasks.withType(JavaCompile) {
	sourceCompatibility = '1.8'
	targetCompatibility = '1.8'
	it.options.encoding = 'UTF-8'
}

// JavaDoc Jar packaging
task packageJavadoc(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
}

// Source Jar Packaging
task packageSources(type: Jar, dependsOn: classes) {
	from sourceSets.main.allSource
}

spotless {
    java {
        enforceCheck = false
        licenseHeaderFile rootProject.file('./formatter/LICENSE')
        eclipse().configFile rootProject.file('./formatter/formatter.xml')
        ignoreErrorForPath('ssssss')
        lineEndings 'UNIX'
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                srcDir 'src-gen/main/java'
            }
            resources {
                srcDir 'src/main/resources'
                srcDir 'src-gen/main/resources'
            }
        }
    }



    task generateMyBatisCode(type: JavaExec) {
        classpath = configurations.myBatisGenerator
        main = 'org.mybatis.generator.api.ShellRunner'
        args = [
                '-configfile',
                "${project.file('generatorConfig.xml')}",
                '-overwrite'
        ]
    }

    flyway {
        url = 'jdbc:mysql://localhost:3307?useSSL=false'
        user = 'root'
        password = 'password'
        schemas = ['workdb', 'sampledb']
    }

    task flywayRelease {
        doLast {
            flywayRepair.execute()
            flywayMigrate.execute()
            flywayInfo.execute()
        }
    }
}
generateMyBatisCode.group = 'mybatis generator'